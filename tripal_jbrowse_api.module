<?php

require_once 'includes/tripal_jbrowse_api.queries.inc';

/**
 * Implements hook_menu().
 */
function tripal_jbrowse_api_menu() {
  $base = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'delivery callback' => 'tripal_jbrowse_api_json_output',
  );
  $items['api/jbrowse/%tripal_jbrowse_api_organism/refSeqs.json'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_refseqs',
    'page arguments' => array(2),
  ) + $base;
  $items['api/jbrowse/%tripal_jbrowse_api_organism/stats/global'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_stats',
    'page arguments' => array(2),
  ) + $base;
  $items['api/jbrowse/%tripal_jbrowse_api_organism/tracks.conf'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_tracks',
    'page arguments' => array(2),
  ) + $base;
  $items['api/jbrowse/%tripal_jbrowse_api_organism/trackList.json'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_tracklist',
    'page arguments' => array(2),
  ) + $base;
  return $items;
}

function tripal_jbrowse_api_json_output($var = NULL) {

  drupal_page_is_cacheable(FALSE);

  drupal_add_http_header('Content-Type', 'application/json; charset=UTF-8');
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  drupal_add_http_header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');

  if (isset($var)) {
    echo drupal_json_encode($var);
  }

  drupal_page_footer();

}

function tripal_jbrowse_api_organism_load($organism_common_name) {
  return chado_query(TRIPAL_JBROWSE_API_QUERY_ORGANISM_BY_COMMON_NAME, array(':organism_common_name' => $organism_common_name))->fetchObject();
}

function tripal_jbrowse_api_callback_refseqs($organism) {
  $results = chado_query(TRIPAL_JBROWSE_API_QUERY_REFSEQ, array(':organism_id' => $organism->organism_id, ':sequence_type' => 'supercontig'));
  $refseqs = array_map(function($row) {
    return array(
      'length' => (int) $row['seqlen'],
      'name' => $row['name'],
      'start' => 0,
      'end' => (int) $row['seqlen'],
      'seqChunkSize' => 20000,
    );
  }, $results->fetchAll(PDO::FETCH_ASSOC));
  return $refseqs;
}

function tripal_jbrowse_api_callback_stats($organism) {
  return array('featureDensity' => 0.01);
}

function tripal_jbrowse_api_callback_tracks($organism) {
  return NULL;
}

function tripal_jbrowse_api_callback_tracklist($organism) {

  $so_type_results = chado_query(TRIPAL_JBROWSE_API_QUERY_SO_TYPE, array(':organism_id' => $organism->organism_id));

  $refseqs_tracks = array(
    array(
      'useAsRefSeqStore' => TRUE,
      'label' => 'ref_seq',
      'key' => $organism->common_name . ' Reference Sequence',
      'type' => 'JBrowse/View/Track/Sequence',
      'storeClass' => 'JBrowse/Store/SeqFeature/REST',
      'baseUrl' => $GLOBALS['base_url'] . '/api/jbrowse/' . $organism->common_name . '/',
      'query' => array(
        'sequence' => TRUE
      ),
    )
  );

  $so_tracks = array_map(function($row) use($organism) {
    return array(
      'category' => 'Generic SO Type Tracks',
      'label' => $organism->common_name . '_' . $row['type'],
      'type' => 'JBrowse/View/Track/HTMLFeatures',
      'trackType' => 'JBrowse/View/Track/HTMLFeatures',
      'key' => $row['type'],
      'query' => array(
        'soType' => $row['type']
      ),
      'regionFeatureDensities' => TRUE,
      'storeClass' => 'JBrowse/Store/SeqFeature/REST',
    );
  }, $so_type_results->fetchAll(PDO::FETCH_ASSOC));

  $data = array(
    'refSeqs' => $GLOBALS['base_url'] . '/api/jbrowse/' . $organism->common_name . '/refSeqs.json',
    'names' => array(
      'type' => 'REST',
      'url' => $GLOBALS['base_url'] . '/api/jbrowse/names',
    ),
    'tracks' => array_merge($refseqs_tracks, $so_tracks),
  );

  return $data;
  
}